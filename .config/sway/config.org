
#+PROPERTY: header-args :tangle config
#+auto_tangle: t

* Variables
** Modifier
#+BEGIN_SRC bash
set $mod Mod4
#+END_SRC

** Movement
Keys to move around Sway
#+BEGIN_SRC bash
set $left h
set $down j
set $up k
set $right l
#+END_SRC

** Workspace keybinds
#+BEGIN_SRC bash
set $ws1-1-key q
set $ws1-2-key w
set $ws1-3-key e
set $ws1-4-key r

set $ws1-1 1:$ws1-1-key:dev
set $ws1-2 2:$ws1-2-key:launch
set $ws1-3 3:$ws1-3-key:game
set $ws1-4 4:$ws1-4-key:misc
#+END_SRC

#+BEGIN_SRC bash
set $ws2-1-key a
set $ws2-2-key s
set $ws2-3-key d
set $ws2-4-key f

set $ws2-1 5:$ws2-1-key
set $ws2-2 6:$ws2-2-key
set $ws2-3 7:$ws2-3-key
set $ws2-4 8:$ws2-4-key
#+END_SRC

** Preferred applications
#+BEGIN_SRC bash
set $term foot
set $emacsclient emacsclient -n -c
set $emacs emacs
set $browser firefox
#+END_SRC

** Launchers
Preferred application launcher
Note: pass the final command to swaymsg so that the resulting window can be opened
on the original workspace that the command was run on.

#+BEGIN_SRC bash
set $menu ~/.nix-profile/bin/rofi -show drun -show-icons -display-drun "Launch"
set $menu_pass PASS_CMD="$HOME/.nix-profile/bin/pass" ~/sh/wofi-pass/wofi-pass
#+END_SRC

** Include systems
#+BEGIN_SRC bash :tangle (if (string= "desktop" (system-name)) "config" "")
include desktop
#+END_SRC

#+BEGIN_SRC bash :tangle (if (string= "framework" (system-name)) "config" "")
include framework
#+END_SRC

* Config
** Output configuration
You can get the mes of your outputs by running:
 #+BEGIN_EXAMPLE
swaymsg -t get_outputs
 #+END_EXAMPLE

#+BEGIN_SRC bash :tangle desktop
# output DP-1 disable
output DP-1 bg #100116 solid_color
output DP-1 resolution 2560x1440@165Hz position 0,0 adaptive_sync off
output DP-2 resolution 2560x1440 position 2560,-570 transform 90
output DP-2 bg #000000 solid_color
#output DP-2 disable
#+END_SRC

#+BEGIN_SRC bash :tangle desktop
exec_always xrandr --output $(xrandr | grep -m 1 XWAYLAND | awk '{print $1;}') --primary
exec systemctl --user restart sunshine
#+END_SRC

#+BEGIN_SRC bash :tangle framework
output * bg #000000 solid_color
output eDP-1 resolution 2256x1504 scale 1.0
#+END_SRC

Assign
#+BEGIN_SRC bash
workspace $ws1-1 output DP-1
workspace $ws1-2 output DP-1
workspace $ws1-3 output DP-1
workspace $ws1-4 output DP-1
#+END_SRC

#+BEGIN_SRC bash
workspace $ws2-1 output DP-2
workspace $ws2-2 output DP-2
workspace $ws2-3 output DP-2
workspace $ws2-4 output DP-2
#+END_SRC

#+BEGIN_SRC bash :tangle framework
workspace $ws2-1 output eDP-1
workspace $ws2-2 output eDP-1
workspace $ws2-3 output eDP-1
workspace $ws2-4 output eDP-1
#+END_SRC

Default colors
#+begin_example conf
client.background n/a ffffff n/a n/a n/a
client.focused 4c7899 285577 ffffff 2e9ef4 285577
client.focused_inactive 333333 5f676a ffffff 484e50 5f676a
client.focused_tab_title 333333 5f676a ffffff n/a n/a
client.unfocused 333333 222222 888888 292d2e 222222
client.urgent 2f343a 900000 ffffff 900000 900000
client.placeholder 000000 0c0c0c ffffff 000000 0c0c0c
#+end_example

#+BEGIN_SRC bash
default_border pixel 3
client.focused 2f004c 2f004c 2f004c 2f004c 2f004c
#+END_SRC

#+BEGIN_EXAMPLE conf :tangle desktop
exec swayidle -w \
     timeout 60 'timeout 3 swaynag -m "Screen turning off in 3 seconds..." -s "cancel" || swaymsg "output * power off"' \
     resume 'swaymsg "output * power on"'
#+END_EXAMPLE

** Idle configuration

This will lock your screen after 300 seconds of inactivity, then turn off
your displays after another 300 seconds, and turn your screens back on when
resumed. It will also lock your screen before your computer goes to sleep.

#+BEGIN_EXAMPLE conf
exec swayidle -w \
         timeout 300 'swaylock -f -c 000000' \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'swaylock -f -c 000000'
#+END_EXAMPLE

** Input configuration

You can get the names of your inputs by running: swaymsg -t get_inputs
Read =man 5 sway-input= for more information about this section.

#+BEGIN_SRC bash :tangle desktop
input "5426:133:Razer_Razer_Basilisk_V2" {
        accel_profile flat enabled
}
#+END_SRC

#+BEGIN_SRC bash :tangle framework
input "2362:628:PIXA3854:00_093A:0274_Touchpad" {
        natural_scroll enabled
        tap enabled
}
#+END_SRC

** Key bindings
*** Output
#+BEGIN_SRC bash
bindsym --locked XF86MonBrightnessUp exec brightnessctl set +10%
bindsym --locked XF86MonBrightnessDown exec brightnessctl set 10%-
#+END_SRC

#+BEGIN_SRC bash
bindsym --locked XF86AudioRaiseVolume exec volumectl -u up
bindsym --locked XF86AudioLowerVolume exec volumectl -u down
bindsym --locked XF86AudioMute exec volumectl toggle-mute
bindsym --locked XF86AudioMicMute exec volumectl -m toggle-mute
#+END_SRC

*** General
Kill focused window
#+BEGIN_SRC bash
bindsym $mod+Shift+u kill
#+END_SRC

Launcher
#+BEGIN_SRC bash
bindsym $mod+u exec $menu
#+END_SRC

Drag floating windows by holding down $mod and left mouse button. Resize them with right mouse
button + $mod. Despite the name, also works for non-floating windows. Change normal to inverse to
use left mouse button for resizing and right mouse button for dragging.
#+BEGIN_SRC bash
floating_modifier $mod normal
#+END_SRC

Reload the configuration file
#+BEGIN_SRC bash
bindsym $mod+Shift+c reload
#+END_SRC

Logout
#+BEGIN_SRC bash
bindsym $mod+Control+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#+END_SRC

*** Applications

#+BEGIN_SRC bash
bindsym $mod+Return exec $term
bindsym $mod+apostrophe exec $emacsclient
bindsym $mod+Shift+apostrophe exec $emacs
bindsym $mod+z exec $browser
#+END_SRC

Password manager
#+BEGIN_SRC bash
bindsym $mod+p exec $menu_pass -t 2>&1 | tee -a /tmp/wofi-pass.log
bindsym $mod+Shift+p exec $menu_pass 2>&1 | tee -a /tmp/wofi-pass.log
#+END_SRC

*** Moving around:
Move your focus around
#+BEGIN_SRC bash
bindsym $mod+$left focus left
bindsym $mod+$down focus down
bindsym $mod+$up focus up
bindsym $mod+$right focus right
#+END_SRC

Or use $mod+[up|down|left|right]
#+BEGIN_SRC bash
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right
#+END_SRC
 
Switch to other output
#+BEGIN_SRC bash
bindsym $mod+Tab focus output left
#+END_SRC

Move the focused window with the same, but add Shift
#+BEGIN_SRC bash
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right
#+END_SRC

Ditto, with arrow keys
#+BEGIN_SRC bash
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
#+END_SRC

*** Workspaces
Switch to workspace
#+BEGIN_SRC bash

bindsym $mod+$ws1-1-key workspace $ws1-1
bindsym $mod+$ws1-2-key workspace $ws1-2
bindsym $mod+$ws1-3-key workspace $ws1-3
bindsym $mod+$ws1-4-key workspace $ws1-4

bindsym $mod+$ws2-1-key workspace $ws2-1
bindsym $mod+$ws2-2-key workspace $ws2-2
bindsym $mod+$ws2-3-key workspace $ws2-3
bindsym $mod+$ws2-4-key workspace $ws2-4
#+END_SRC

Move focused container to workspace
Note: workspaces can have any name you want, not just numbers.
#+BEGIN_SRC bash
bindsym $mod+Shift+$ws1-1-key move container to workspace $ws1-1
bindsym $mod+Shift+$ws1-2-key move container to workspace $ws1-2
bindsym $mod+Shift+$ws1-3-key move container to workspace $ws1-3
bindsym $mod+Shift+$ws1-4-key move container to workspace $ws1-4

bindsym $mod+shift+$ws2-1-key move container to workspace $ws2-1
bindsym $mod+shift+$ws2-2-key move container to workspace $ws2-2
bindsym $mod+shift+$ws2-3-key move container to workspace $ws2-3
bindsym $mod+shift+$ws2-4-key move container to workspace $ws2-4
#+END_SRC

*** Layout stuff
You can "split" the current object of your focus with $mod+b or $mod+v, for horizontal and vertical
splits respectively.
#+BEGIN_SRC bash
bindsym $mod+Control+l splith
bindsym $mod+Control+j splitv
#+END_SRC

Switch to different layouts
#+BEGIN_SRC bash
#bindsym $mod+s layout stacking
#bindsym $mod+e layout tabbed
bindsym $mod+Shift+y layout toggle all
bindsym $mod+y split none
#+END_SRC

Toggle fullscreen
#+BEGIN_SRC bash
bindsym $mod+g fullscreen
#+END_SRC

Toggle floating
#+BEGIN_SRC bash
bindsym $mod+Shift+g floating toggle
#+END_SRC

Swap focus between the tiling area and the floating area
#+BEGIN_SRC bash :tangle no
#bindsym $mod+space focus mode_toggle
#+END_SRC

Move focus to the parent container
#+BEGIN_SRC bash
#bindsym $mod+Shift+p focus parent
#+END_SRC

*** Media control
#+BEGIN_SRC bash
bindsym XF86AudioPrev exec mpc prev
bindsym XF86AudioNext exec mpc next
bindsym XF86AudioPlay exec mpc toggle
#+END_SRC

*** Scratchpad:
Sway has a "scratchpad", which is a bag of holding for windows.
You can send windows there and get them back later.

Move the currently focused window to the scratchpad
#+BEGIN_SRC bash
bindsym $mod+Shift+minus move scratchpad
#+END_SRC

Show the next scratchpad window or hide the focused scratchpad window.
If there are multiple scratchpad windows, this command cycles through them.
#+BEGIN_SRC bash
bindsym $mod+minus scratchpad show, resize 135x35
#+END_SRC

*** Resizing containers:

#+BEGIN_SRC bash

mode "resize" {
    bindsym $left resize shrink width 100px
    bindsym $down resize grow height 100px
    bindsym $up resize shrink height 100px
    bindsym $right resize grow width 100px

    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+x mode "resize"
#+END_SRC

** Status Bar:
Read `man 5 sway-bar` for more information about this section.

When the status_command prints a new line to stdout, swaybar updates.
The default just shows the current date and time.
#+BEGIN_EXAMPLE
bar {
    position top

    status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done

    colors {
        statusline #ffffff
        background #323232
        inactive_workspace #32323200 #32323200 #5c5c5c
    }
}
#+END_EXAMPLE

#+BEGIN_SRC bash
bar {
    swaybar_command waybar
}
#+END_SRC

** Window Rules
#+BEGIN_SRC bash
# Apps
for_window [class="discord"] move container to workspace $ws2-1
for_window [app_id="discord"] move container to workspace $ws2-1
for_window [app_id="pavucontrol"] move container to workspace $ws2-1
for_window [class="emacs"] move container to workspace $ws2-3
for_window [app_id="org.gnome.Calculator"] floating enable
for_window [app_id="zenity"] floating enable
# Unity
for_window [class="Unity"] floating true
for_window [class="unityhub"] floating true
# Launchers
for_window [app_id="lutris"] move container to workspace $ws1-2
for_window [app_id="lutris"] floating enable
for_window [class="Steam"] move container to workspace $ws1-2
for_window [class="steam"] move container to workspace $ws1-2
for_window [class="steamwebhelper"] move container to workspace $ws1-2

# Guild Wars 2
for_window [class="gw2-64.exe"] move container to workspace $ws1-3
# Minecraft
for_window [class="Minecraft*"] move container to workspace $ws1-3
# Overwatch
for_window [class="battle.net.exe"] move container to workspace $ws1-2
for_window [class="battle.net.exe"] floating enable
for_window [class="overwatch.exe"] move container to workspace $ws1-3
for_window [class="overwatch.exe"] fullscreen enable
# Stash floating wine system tray to scratchpad
for_window [title="Wine System Tray"] move container to scratchpad
# Gamescope
for_window [class="gamescope"] move container to workspace $ws1-3
# SteamTinkerLauncher
,#+BEGIN_SRC bash
for_window [app_id="yad"] move container to workspace $ws1-3
for_window [app_id="yad"] floating true
# Mupen64
for_window [app_id="mupen64plus-gui"] move container to workspace $ws1-3
for_window [app_id="mupen64plus-gui"] floating true
# RetroArch
for_window [app_id="retroarch"] move container to workspace $ws1-3
for_window [app_id="retroarch"] fullscreen true
# Dolphin
for_window [class="dolphin-emu"] move container to workspace $ws1-3
for_window [class="dolphin-emu"] floating true
#+END_SRC

* Autostart

#+BEGIN_SRC bash :tangle desktop
exec pavucontrol
bindsym $mod+grave exec swaync-client -t -sw
# bindsym $mod+Shift+grave exec grim -g "$(slurp) - | wl-copy"
bindsym $mod+Shift+grave exec grim -g 'echo "1440,560 2560x1440" | wl-copy'
exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
#+END_SRC

* Defaults
#+BEGIN_SRC bash
include /etc/sway/config.d/*
#+END_SRC
