;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

latex-mode

(begin "\\begin{" (s env) "}" > n> r> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" p "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(ups "(use-package " p n> ":straight t" q ")")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(let "(let (" p ")" n> r> ")")
(star "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")")

eshell-mode

(for "for " (p "i") " in " p " { " p " }")
(while "while { " p " } { " p " }")
(until "until { " p " } { " p " }")
(if "if { " p " } { " p " }")
(if-else "if { " p " } { " p " } { " p " }")
(unless "unless { " p " } { " p " }")
(unless-else "unless { " p " } { " p " } { " p " }")

text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

rst-mode

(title (make-string (length title) ?=) n (p "Title: " title) n (make-string (length title) ?=) n)

java-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

c-mode :condition (re-search-backward "^\\w*$" (line-beginning-position) 'noerror)

(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">")
(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")

org-mode

(title "#+TITLE: " p n "#+AUTHOR: Ben Whitley" n "#+LANGUAGE: en" n n)
(quote "#+BEGIN_QUOTE" n> r> n> "#+END_QUOTE")
(example "#+BEGIN_EXAMPLE" n> r> n> "#+END_EXAMPLE")
(center "#+BEGIN_CENTER" n> r> n> "#+END_CENTER")
(comment "#+BEGIN_COMMENT" n> r> n> "#+END_COMMENT")
(verse "#+BEGIN_VERSE" n> r> n> "#+END_VERSE")
(src "#+BEGIN_SRC " p n> r> n> "#+END_SRC")
(el "#+BEGIN_SRC emacs-lisp" n> r> n "#+END_SRC"
       :post (progn (tempel-done) (org-edit-src-code)))

rustic-mode rust-mode

(fn "fn " p "(" p ") " p " {" n> q (p "todo!()") n "}")
(new "pub fn new(" q ") -> Self {" n> "Self {" n> q n > "} " n> "}")
(implfor "impl " p " for " p " {" n> q n "}")
(impl "impl " p " {" n> q n "}")
(mtest "#[cfg(test)]" n "mod test {" n n> "#[test]" n> "fn test() {" n> q n "}" n "}")
(test "#[test]" n> "fn " (p "test") "() {" n> q n "}")

(d "println!(\"" (s var) ": {:?}\", " (p "var" var) ");" q)
(pl "println!(\"" q "\");")
(p "print!(\"" q "\");")
(der "#[derive(" q ")]")
(eq "#[derive(Eq, PartialEq)]")
(todo "todo!()")
(maperr ".map_err(|e| Error::" q "(e))?")
