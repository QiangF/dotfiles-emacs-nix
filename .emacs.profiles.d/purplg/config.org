#+STARTUP: overview

* Todo's
- Org-capture
- IRC
  Mostly configured but doesn't autojoin channels for some reason
- Workspaces

* Basic settings
** Keep config directory clean

Move all the packages and other generated files into a different directory to keep the configuration
directory clean

 #+BEGIN_SRC emacs-lisp :results none

(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

 #+END_SRC

** Package management with straight.el
*** Bootstrap copy-pasta

Copied from the straight.el repository README to begin using straight.el

#+BEGIN_SRC emacs-lisp :results none

(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
      (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))

#+END_SRC

*** use-package integration for convenient functions

I prefer the additional features of ~use-package~. This lines enables using ~use-package~ features with straight

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package 'use-package)
#+END_SRC

** config file

Helper vars and functions to assist with finding config files

#+BEGIN_SRC emacs-lisp :results none

(defconst purplg/config-dir "~/.emacs.profiles.d/purplg/")

(defun purplg/config-file (filename)
  "returns the full path of a file in the purplg/config-dir
directory if it exists"
  (unless (string-empty-p filename)
    (let ((filepath (expand-file-name filename purplg/config-dir)))
      (if (file-exists-p filepath) filepath nil))))

#+END_SRC

** Frame

Set the title of the Emacs frame

#+BEGIN_SRC emacs-lisp :results none
(setq frame-title-format "PurplEmacs")
#+END_SRC

** Environment

Copy my user enviroment settings into Emacs. Necessary for some things like using Rust Cargo crates

#+BEGIN_SRC emacs-lisp
(when (daemonp)
  (use-package exec-path-from-shell
    :straight t
    :init
    (exec-path-from-shell-initialize)))
#+END_SRC

** Native comp
  
Silence compiler warnings

 #+BEGIN_SRC emacs-lisp :results none
(setq native-comp-async-report-warnings-errors nil)
 #+END_SRC

** Util functions

A slight hack to add around functions as advice to prevent cursor from jumping around with some actions

#+BEGIN_SRC emacs-lisp :results none

(defun save-excursion-wrapper (inner &rest args)
  (save-excursion
      (funcall inner)))

#+END_SRC

* Keybinds
** general.el for easy keybind configuration

General.el is really nice for configuring keybinds

#+BEGIN_SRC emacs-lisp :results none
(use-package general
  :straight t)
#+END_SRC

** Leader keys

#+BEGIN_SRC emacs-lisp :results none

(general-create-definer purplg/leader-key :prefix "SPC")
(general-create-definer purplg/local-leader-key :prefix "SPC m")

#+END_SRC

** Global keybinds

#+BEGIN_SRC emacs-lisp :results none

(purplg/leader-key :states 'normal
  "m" '(:which-key "local")
  "o" '(:which-key "open")
  "s" '(:which-key "search")
  "c" '(:which-key "code")
  "p" '(:which-key "project")

  "t" '(:which-key "toggle")
  "t f" '(display-fill-column-indicator-mode :which-key "fill-column")
  "t n" '(purplg/toggle-line-numbers :which-key "line numbers")

  "f" '(:which-key "file")
  "f f" '(find-file :which-key "find")
  "f s" '(save-buffer :which-key "save")

  "h" '(:which-key "help")
  "h k" '(describe-key :which-key "key")
  "h b" '(counsel-descbinds :which-key "binds")

  "q" '(:which-key "quit")
  "q w" '(delete-window :which-key "window")
  "q b" '(kill-this-buffer :which-key "buffer")
  "q q" '(save-buffers-kill-terminal :which-key "really quit?")

  "w" '(:which-key "window")
  "w d" 'delete-window
  "w s" 'split-window-below
  "w v" 'split-window-right

  "b" '(:which-key "buffer")
  "b b" '(project-switch-to-buffer :which-key open)
  "b d" 'kill-this-buffer
  "b r" 'revert-buffer

  ";" 'eval-expression)

#+END_SRC

** Evil

#+BEGIN_SRC emacs-lisp :results none

(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(use-package evil
  :straight t
  :after undo-fu
  :init
  (setq evil-want-keybinding nil)
  (setq evil-undo-system 'undo-fu)
  (evil-mode 1)

  (purplg/leader-key :states 'normal
    "b p" '(evil-prev-buffer :which-key "previous")
    "b n" '(evil-next-buffer :which-key "next")
    "b N" '(evil-buffer-new :which-key "new"))

  :general
  (:states 'normal
    "M-j" 'move-line-down
    "M-k" 'move-line-up
    "C-j" 'evil-forward-section-begin
    "C-k" 'evil-backward-section-begin))

(use-package evil-surround
  :straight t
  :after evil
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

#+END_SRC

** Unbind SPC in Dired mode

Dired takes precendence for the ~SPC~ key. Don't like that

#+BEGIN_SRC emacs-lisp :results none

(general-define-key
  :states 'normal
  :keymaps 'dired-mode-map
  "SPC" nil)

#+END_SRC

** Window switch fix

I often press =C-w C-h= to go left (for example) instead of =C-w h= so I'll just bind both.

#+BEGIN_SRC emacs-lisp

(general-define-key
  :states 'normal
  "C-w C-h" 'evil-window-left
  "C-w C-j" 'evil-window-down
  "C-w C-k" 'evil-window-up
  "C-w C-l" 'evil-window-right)

#+END_SRC

#+RESULTS:

* Interface
** Appearance
*** Font

#+BEGIN_SRC emacs-lisp :results none

(add-to-list 'default-frame-alist '(font . "Fira Code Retina-10"))

#+END_SRC

*** Highlight current line

#+BEGIN_SRC emacs-lisp :results none

(add-hook 'text-mode-hook (lambda () (hl-line-mode 1)))
(add-hook 'prog-mode-hook (lambda () (hl-line-mode 1)))

#+END_SRC

*** Hide extraneous stuff
  
Configures and minimalizes the main Emacs frame

#+BEGIN_SRC emacs-lisp :results none

(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

#+END_SRC

*** Relative line numbers

A couple functions to enable/disable/toggle line numbers and their hooks.

#+BEGIN_SRC emacs-lisp :results none

(setq-default display-line-numbers 'visual
              display-line-numbers-widen t
              display-line-numbers-current-absolute t)

(defun purplg/relative-line-numbers ()
  (setq-local display-line-numbers 'visual))

(defun purplg/hide-line-numbers ()
  (setq-local display-line-numbers nil))

(defun purplg/toggle-line-numbers ()
  (interactive)
  (if display-line-numbers
    (purplg/hide-line-numbers)
    (purplg/relative-line-numbers)))

(add-hook 'text-mode-hook 'purplg/relative-line-numbers)
(add-hook 'prog-mode-hook 'purplg/relative-line-numbers)

#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp :results none

(use-package doom-themes
  :straight t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(load-theme 'doom-dracula t)

#+END_SRC

** Features
*** Scratch buffer

Prevent the scratch buffer from being deleted

#+BEGIN_SRC emacs-lisp

(with-current-buffer "*scratch*" (emacs-lock-mode 'kill))

#+END_SRC

*** Dashboard

#+BEGIN_SRC emacs-lisp :results none

(use-package dashboard
  :straight t
  :config
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
        dashboard-items '((projects . 5)
                  (recents . 5))
dashboard-banners-directory (concat purplg/config-dir "banners/")
dashboard-startup-banner (+ 1 (random 3)))

  (dashboard-setup-startup-hook)

  (add-hook 'dashboard-after-initialize-hook (lambda () 
    (with-current-buffer "*dashboard*" (emacs-lock-mode 'kill)))))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(setq dashboard-set-navigator t)
(setq dashboard-navigator-buttons
      `(((nil "Home Assistant" "Home Assistant" (lambda (&rest _) (hass/query-entities))))))
#+END_SRC

#+RESULTS:
| (nil Home Assistant Home Assistant (lambda (&rest _) (hass/query-entities))) |

*** Which-key

A handy popup to show keybinds.

#+BEGIN_SRC emacs-lisp :results none

(use-package which-key
  :straight t
  :config
  (setq which-key-idle-delay 1)
  (which-key-mode 1))

#+END_SRC

*** Completion framework
**** Ivy

Ivy config just in case I wanna use it for something. Disabled.

#+BEGIN_SRC emacs-lisp :results none :tangle no

;; Better fuzzy search. Unintuitively intercepts `ivy--regex-fuzzy` below
(use-package flx
  :straight t)

(use-package ivy
  :straight t
  :init
  (ivy-mode 1)

  :config
  (setq ivy-use-virtual-buffers t
        ivy-initial-inputs-alist nil
        ivy-re-builders-alist '((t . ivy--regex-fuzzy)))

  :general
;; Minibuffer Evil movement keys
  (:keymaps 'ivy-minibuffer-map
    "C-S-k" 'ivy-scroll-down-command
    "C-S-j" 'ivy-scroll-up-command
    "C-k" 'ivy-previous-line
    "C-j" 'ivy-next-line))

(use-package counsel
  :straight t
  :after ivy
  :init
  (counsel-mode 1)

  :config
  (setq counsel-describe-variable-function 'helpful-variable
        counsel-describe-function-function 'helpful-function)

  ;; Redefine find file functions to counsel variants
  (defun purplg/find-file-in-profile-dir ()
    (interactive)
    (counsel-find-file purplg/config-dir))
  
  (defun purplg/find-file-in-home-dir ()
    (interactive)
    (counsel-find-file "~"))
  
  (defun purplg/find-file-in-root-dir ()
    (interactive)
    (counsel-find-file "/"))

  (defun purplg/project-search-thing-at-point ()
    (interactive)
    (counsel-rg (thing-at-point 'symbol)))

  (purplg/leader-key
    :states 'normal
    "p s" '(counsel-rg :which-key "search")
    "f f" '(counsel-find-file :which-key "in profile")
    "f p" '(purplg/find-file-in-profile-dir :which-key "in profile")
    "f ~" '(purplg/find-file-in-home-dir :which-key "in home")
    "f /" '(purplg/find-file-in-root-dir :which-key "in root")
    "f r" '(counsel-recentf :which-key "find recent")
    "p S" '(purplg/project-search-thing-at-point :which-key "search this")))

(use-package ivy-rich
  :straight t
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package swiper
  :straight t
  :after ivy
  :config
  (purplg/leader-key :states 'normal
    "s b" '(swiper :which-key "buffer")))

#+END_SRC

**** Vertico

#+BEGIN_SRC emacs-lisp :results none

(use-package vertico
  :straight t
  :init
  (vertico-mode 1)

  :config
  ;; Redefine find file functions to support vertico
  (defun purplg/find-file-in-profile-dir ()
    (interactive)
    (ido-find-file-in-dir purplg/config-dir))
  
  (defun purplg/find-file-in-home-dir ()
    (interactive)
    (ido-find-file-in-dir "~"))
  
  (defun purplg/find-file-in-root-dir ()
    (interactive)
    (ido-find-file-in-dir "/"))

  (defun purplg/project-search-thing-at-point ()
    (interactive)
    (consult-ripgrep projectile-project-root (thing-at-point 'symbol)))

  (purplg/leader-key
    :states 'normal
    "f p" '(purplg/find-file-in-profile-dir :which-key "in profile")
    "f ~" '(purplg/find-file-in-home-dir :which-key "in home")
    "f /" '(purplg/find-file-in-root-dir :which-key "in root")
    "p S" '(purplg/project-search-thing-at-point :which-key "search this"))

  :general
  (:keymaps 'minibuffer-local-map
    "C-S-k" 'scroll-down-command
    "C-S-j" 'scroll-up-command
    "C-k" 'previous-line
    "C-j" 'next-line
    "C-l" 'vertico-insert))

(use-package consult
  :straight t
  :after vertico
  :config
  (purplg/leader-key
    :states 'normal
    "b b" '(consult-buffer :which-key "buffer")
    "b o" '(consult-buffer-other-frame :which-key "buffer-other")
    "s b" '(consult-line :which-key "buffer")
    "s r" '(consult-ripgrep :which-key "regex")
    "f r" '(consult-recent-file :which-key "recent"))
  (recentf-mode 1))
    
(use-package consult-lsp
  :straight t
  :after consult lsp
  :config
  (purplg/leader-key
    :states 'normal
    :keymaps 'lsp-mode-map
    "s e" '(consult-lsp-diagnostics :which-key "errors")))

(use-package marginalia
  :straight t
  :after vertico
  :init
  (marginalia-mode 1))

(use-package orderless
  :straight t
  :after vertico
  :config
  (setq completion-styles '(orderless partial-completion)))

#+END_SRC

**** Save histry between sessions

#+BEGIN_SRC emacs-lisp :results none

(use-package savehist
  :straight t
  :init
  (savehist-mode))

#+END_SRC

*** Modeline

#+BEGIN_SRC emacs-lisp :results none

(use-package doom-modeline
  :straight t
  :config
  (doom-modeline-mode 1))

#+END_SRC

*** Perspectives

#+BEGIN_SRC emacs-lisp :results none

(use-package persp-mode
  :straight t
  :config
  (setq persp-auto-resume-time -1)

  ;; Modified from Doom's `+workspace--tabline
  (defun persp--format-tab (label active) 
    (propertize label
      'face (if active
        'doom-modeline-panel
        'doom-modeline-bar-inactive)))

  (defun persp-list () 
  "Display a list of perspectives"
    (interactive)
    (message "%s"
      (let ((names persp-names-cache)
            (current-name (safe-persp-name
                            (get-current-persp
                              (selected-frame)
                              (selected-window)))))
        (mapconcat
         #'identity
          (cl-loop for name in names
                   for i to (length names)
                   collect
                   (persp--format-tab
                     (format " %d:%s " (1+ i) name)
                     (equal current-name name)))
         nil))))

  (purplg/leader-key
    :states 'normal
    :keymaps 'persp-mode-map
    "b b" '(persp-switch-to-buffer :which-key "buffer")
    "TAB" '(:which-key "perspectives")
    "TAB TAB" '(persp-list :which-key "list")
    "TAB n" '(persp-next :which-key "next persp")
    "TAB s" '(persp-switch :which-key "switch")
    "TAB a" '(persp-add-buffer :which-key "add buffer")
    "TAB x" '(persp-remove-buffer :which-key "remove buffer")
    "TAB d" '(persp-kill :which-key "kill persp")
    "TAB r" '(persp-rename :which-key "rename")
    "TAB p" '(persp-prev :which-key "prev persp")))

  (persp-mode)
  
#+END_SRC

* Help!

#+BEGIN_SRC emacs-lisp :results none

(use-package helpful
  :straight t
  :config
  (purplg/leader-key :states 'normal
    "h f" '(helpful-function :which-key "function")
    "h v" '(helpful-variable :which-key "variable")
    "h V" '(apropos-value :which-key "value")
    "h ." '(helpful-at-point :which-key "this")
    "h k" '(helpful-key :which-key "key")))

#+END_SRC

* Editing

General editing tweaks

#+BEGIN_SRC emacs-lisp :results none

(setq auto-save-default nil) ;; No autosave
(setq-default fill-column 100) ;; Wrap text at 100 characters
(indent-tabs-mode 0) ;; Disable tabs

#+END_SRC

** Undo

The default Emacs default undo system has some weird behavior where it can undo changes that
shouldn't exist anymore and I find it confusing. ~undo-fu~ is a lot more intuitive for me since it
will prevent undo past the beginning of history. Might try undo-tree one day, but seems unnecessary
with version control. ~undo-fu-session~ persists undo history between Emacs sessions.

#+BEGIN_SRC emacs-lisp :results none

(use-package undo-fu
  :straight t)

(use-package undo-fu-session
  :straight t
  :after undo-fu
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (global-undo-fu-session-mode))

#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp :results none

(use-package yasnippet-snippets
  :straight t)

(use-package yasnippet
  :after yasnippet-snippets
  :straight t
  :config
  (push (expand-file-name "snippets" purplg/config-dir) yas-snippet-dirs)
  (yas-global-mode 1))

#+END_SRC

** Development
*** Tools
**** Git

#+BEGIN_SRC emacs-lisp :results none

(use-package magit
  :straight t
  :config
  (purplg/leader-key :states 'normal
    "g" '(:which-key "git")
    "g g" '(magit-status :which-key "status")))

#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
(use-package git-gutter
  :straight t

  :config
  (add-hook 'prog-mode-hook 'git-gutter-mode))

#+END_SRC

**** Text completion

#+BEGIN_SRC emacs-lisp :results none

(use-package company
  :straight t)

#+END_SRC

**** Flycheck

#+BEGIN_SRC emacs-lisp :results none
(use-package flycheck
  :straight t
  :config
  (add-hook 'lsp-mode-hook 'flycheck-mode))
#+END_SRC

**** LSP

#+BEGIN_SRC emacs-lisp :results none

(use-package lsp-mode
  :straight t

  :config
  (setq evil-lookup-func #'lsp-describe-thing-at-point)

  (purplg/leader-key
    :states 'normal
    "c a" '(lsp-execute-code-action :which-key "execute action")
    "c f" '(lsp-format-buffer :which-key "format")
    "c r" '(lsp-rename :which-key "rename"))

  :general
  (:keymaps 'evil-motion-state-map
    "g D" 'lsp-find-references))

(use-package lsp-ui
  :straight t
  :after lsp-mode

  :config
  ;; recommended performance tweaks
  (setq gc-cons-threshold 100000000
        read-process-output-max (* 1024 1024))
  
  ;; Disable because it causes input lag
  (setq lsp-ui-doc-enable nil
        lsp-ui-sideline-show-hover t)

  :general
  (:keymaps 'lsp-ui-peek-mode-map
    "j" 'lsp-ui-peek--select-next
    "h" 'lsp-ui-peek--select-prev-file
    "l" 'lsp-ui-peek--select-next-file
    "k" 'lsp-ui-peek--select-prev
    "C-<return>" 'lsp-ui-peek--goto-xref-other-window))

#+END_SRC

**** File tree

#+BEGIN_SRC emacs-lisp :results none

(use-package treemacs
  :straight t

  :config
  (treemacs-resize-icons 16)
  (treemacs-set-width 30)
  
  (purplg/leader-key
    :states 'normal
    "o p" 'treemacs))

(use-package treemacs-all-the-icons
  :straight t
  :after treemacs
  :config
  (treemacs-load-theme "all-the-icons"))

#+END_SRC

**** Project management
#+BEGIN_SRC emacs-lisp :results none

(use-package projectile
  :straight t
  :config
  (purplg/leader-key
    :states 'normal
    "p f" '(projectile-find-file :which-key "file")
    "p a" '(projectile-add-known-project :which-key "add")
    "p p" '(projectile-switch-project :which-key "open"))
  (projectile-mode +1))

#+END_SRC

**** Rest client

#+BEGIN_SRC emacs-lisp :results none

(use-package restclient
  :straight t)
  
#+END_SRC

**** Code Folding

#+BEGIN_SRC emacs-lisp :results none

(use-package hideshow
  :straight t
  :config

  (defun evil-close-fold-below ()
    "Close fold on current line instead of enclosing block at point"
    (interactive)
    (save-excursion
      (end-of-line)
      (evil-close-fold)))

  (defun evil-open-fold-save ()
    "Keep point in place when opening fold"
    (interactive)
    (save-excursion
      (evil-open-fold)))

  ;; Keep cursor in place when opening a fold
  (advice-add 'evil-open-fold :around 'save-excursion-wrapper)
  (add-hook 'prog-mode-hook 'hs-minor-mode)

  :general
  (:states 'normal
    "z c" 'evil-close-fold-below
    "z C" 'evil-close-fold))

#+END_SRC

**** Syntax highlighting

~tree-sitter~ is a faster syntax parsing package
#+BEGIN_SRC emacs-lisp :results none

(use-package tree-sitter
  :straight t)

(use-package tree-sitter-langs
  :straight t
  :after tree-sitter
  :config
  (add-hook 'rustic-mode-hook #'tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

#+END_SRC

*** Lanuages
**** Rust

#+BEGIN_SRC emacs-lisp :results none

(use-package rustic
  :straight t

  :config
  (setq rustic-format-on-save nil
        rustic-lsp-format nil)

  (defun rustic-cargo-run-no-args () 
    (interactive)
    (rustic-run-cargo-command "cargo run"))
    
  (add-hook 'rustic-mode-hook (lambda () (electric-indent-mode 1)))

  (purplg/local-leader-key
    :states  'normal
    :keymaps 'rustic-mode-map
    "c" '(:which-key "cargo")
    "c r" '(rustic-cargo-run-no-args :which-key "run")
    "c R" '(rustic-cargo-run :which-key "run w/ args")
    "c a" '(rustic-cargo-add :which-key "add dep")
    "c x" '(rustic-cargo-rm :which-key "rm dep")
    "c c" '(rustic-cargo-check :which-key "check")
    "c t" '(rustic-cargo-test :which-key "test")))

#+END_SRC

#+BEGIN_SRC emacs-lisp :results none :tangle no

(general-define-key 
  :states 'normal
  :keymaps 'prog-mode-map
  "C-[" 'previous-error)
  "C-]" 'next-error)

#+END_SRC

**** Emacs Lisp
***** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp :results none

(use-package rainbow-delimiters
  :straight t
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))

#+END_SRC

***** Parinfer - for easy elisp paren management

#+BEGIN_SRC emacs-lisp :results none

(use-package parinfer-rust-mode
  :straight t
  :hook emacs-lisp-mode
  :init
  (setq parinfer-rust-auto-download t)
  
  :config
  (add-hook 'parinfer-rust-mode-hook (lambda () (electric-indent-mode 0)))
  (purplg/local-leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "p" '(parinfer-rust-toggle-paren-mode :which-key "parinfer")))

#+END_SRC
***** keybinds
#+BEGIN_SRC emacs-lisp :results none

(purplg/leader-key
  :states 'normal
  :keymaps 'emacs-lisp-mode-map
  "e" '(:which-key "eval")
  "e b" '(eval-buffer :which-key "buffer")
  "e f" '(eval-defun :which-key "function"))

(purplg/leader-key
  :states 'visual
  :keymaps 'emacs-lisp-mode-map
  "e" '(:which-key "eval")
  "e r" '(eval-region :which-key "region"))

#+END_SRC
**** Org mode

#+BEGIN_SRC emacs-lisp :results none

(use-package org
  :straight t

  :config
  (setq org-return-follows-link t       ;; Press Enter to follow link under point
        org-adapt-indentation nil       ;; Stop putting indents everywhere
        org-src-tab-acts-natively nil   ;; Fixes src block yasnippet not placing cursor in correct place after expanding
        org-src-preserve-indentation t  ;; Stop annoying bug with indenting elisp in a code block
        org-src-content-indentation 0   ;; "
        org-confirm-babel-evaluate nil) ;; Don't ask for confirmation when executing a codeblock

  (purplg/leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "t l" '(org-toggle-link-display :which-key "link display"))

  :general
  ;; Use ~org-return~ in org-mode to enable following links with RET while in Evil 'normal mode
  (:states 'normal
    :keymaps 'org-mode-map
    "RET" 'org-return))

#+END_SRC

* password-store

#+BEGIN_SRC emacs-lisp

(use-package pass
  :straight t
  :config
  (setq auth-sources '(password-store)))

#+END_SRC

* IRC

Automatically pull credentials and autojoin channels from ~pass~.
Can't figure out why =erc-autojoin-channels-alist= isn't working even when passing a list of strings directly

#+BEGIN_SRC emacs-lisp :tangle no

(use-package erc
  :straight t
  :after pass
  :init
  (defun purplg/connect-to-irc ()
    (interactive)
    (erc-tls :server   "irc.libera.chat"
             :port     "6697"
             :nick     (auth-source-pass-get "nick" "irc.libera.chat")
             :password (auth-source-pass-get 'secret "irc.libera.chat")))

  :config
  (setq erc-prompt-for-password nil
        erc-kill-buffer-on-part t
        erc-kill-server-buffer-on-quit t
        erc-autojoin-channels-alist `(("irc.libera.chat" ,(split-string (auth-source-pass-get "libera-channels" "irc.libera.chat")))))

  (purplg/connect-to-irc))

#+END_SRC
