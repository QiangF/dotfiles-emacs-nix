#+STARTUP: content

* Todo's
- Org-capture
- IRC
- Workspaces
- Surround

* Basic settings
** Frame

#+BEGIN_SRC emacs-lisp :results none
(setq frame-title-format "PurplEmacs")
#+END_SRC

** Native comp
  
Silence compiler warnings
 #+BEGIN_SRC emacs-lisp :results none
(setq native-comp-async-report-warnings-errors nil)
 #+END_SRC

** Keep config directory clean

 #+BEGIN_SRC emacs-lisp :results none

(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

 #+END_SRC

* Package management with straight.el
** Bootstrap copy-pasta

#+BEGIN_SRC emacs-lisp :results none

(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
      (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))

#+END_SRC

** use-package integration for convenient functions

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package 'use-package)
#+END_SRC

* Keybinds
** Packages

#+BEGIN_SRC emacs-lisp :results none
(use-package general
  :straight t)
#+END_SRC

 #+BEGIN_SRC emacs-lisp :results none

(use-package evil
  :straight t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

 #+END_SRC

** Helper functions

#+BEGIN_SRC emacs-lisp :results none

(defun purplg/find-file-in-profile-dir ()
  (interactive)
  (counsel-find-file purplg/config-dir))

(defun purplg/find-file-in-home-dir ()
  (interactive)
  (counsel-find-file "~"))

(defun purplg/find-file-in-root-dir ()
  (interactive)
  (counsel-find-file "/"))

(defun purplg/test ()
  (interactive)
  (message "yay it worked!"))

#+END_SRC

** Leader keys

#+BEGIN_SRC emacs-lisp :results none

(general-create-definer purplg/leader-key :prefix "SPC")
(general-create-definer purplg/local-leader-key :prefix "SPC m")

#+END_SRC

** Global keybinds
#+BEGIN_SRC emacs-lisp :results none

(purplg/leader-key :states 'normal
  "m" '(:which-key "local")
  "o" '(:which-key "open")
  "t" '(:which-key "toggle")
  "t f" '(display-fill-column-indicator-mode :which-key "fill-column")
  "t n" '(purplg/toggle-line-numbers :which-key "line numbers")

  "f" '(:which-key "file")
  "f f" '(counsel-find-file :which-key "find")
  "f p" '(purplg/find-file-in-profile-dir :which-key "in profile")
  "f ~" '(purplg/find-file-in-home-dir :which-key "in home")
  "f /" '(purplg/find-file-in-root-dir :which-key "in root")
  "f r" '(counsel-recentf :which-key "find recent")
  "f s" '(save-buffer :which-key "save")

  "h" '(:which-key "help")
  "h k" '(describe-key :which-key "key")
  "h b" '(counsel-descbinds :which-key "binds")

  "q" '(:which-key "quit")
  "q w" '(delete-window :which-key "window")
  "q b" '(kill-this-buffer :which-key "buffer")
  "q q" '(save-buffers-kill-terminal :which-key "really quit?")

  "w" '(:which-key "window")
  "w d" 'delete-window
  "w s" 'split-window-below
  "w v" 'split-window-right

  "b" '(:which-key "buffer")
  "b b" '(project-switch-to-buffer :which-key open)
  "b d" 'kill-this-buffer
  "b r" 'revert-buffer

  "s" '(:which-key "search")
  "s b" 'swiper

  ";" 'eval-expression)

#+END_SRC

** Unbind SPC in Dired mode

#+BEGIN_SRC emacs-lisp :results none

(general-define-key
  :states 'normal
  :keymaps 'dired-mode-map
  "SPC" nil)

#+END_SRC

* Interface
** Font

#+BEGIN_SRC emacs-lisp :results none

(set-face-attribute 'default nil :font "Fira Code Retina-10" )
(set-frame-font "Fira Code Retina-10" nil t)

#+END_SRC
** Hide extraneous stuff
  
#+BEGIN_SRC emacs-lisp :results none

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

(setq auto-save-default nil)

(setq-default fill-column 100)

(defconst purplg/config-dir "~/.emacs.profiles.d/purplg/")

#+END_SRC

** Relative line numbers

#+BEGIN_SRC emacs-lisp :results none

(setq-default display-line-numbesr 'visual
              display-line-numbers-widen t
              display-line-numbers-current-absolute t)

(defun purplg/relative-line-numbers ()
  (setq-local display-line-numbers 'visual))

(defun purplg/hide-line-numbers ()
  (setq-local display-line-numbers nil))

(defun purplg/toggle-line-numbers ()
  (interactive)
  (if display-line-numbers
    (purplg/hide-line-numbers)
    (purplg/relative-line-numbers)))

(add-hook 'text-mode-hook #'purplg/relative-line-numbers)

#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp :results none

(use-package which-key
  :straight t
  :config
  (setq which-key-idle-delay 1)
  (which-key-mode 1))

#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :results none

(use-package doom-themes
  :straight t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-horizon t))

#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp :results none

(use-package doom-modeline
  :straight t
  :config
  (doom-modeline-mode 1))

#+END_SRC

* Org mode

#+BEGIN_SRC emacs-lisp :results none

(use-package org
  :straight t

  :config
  ;; Press Enter to follow link under point
  (setq org-return-follows-link t

  ;; Stop putting indents everywhere
        org-adapt-indentation nil

  ;; Fixes src block yasnippet not placing cursor in correct place after expanding
	org-src-tab-acts-natively nil

  ;; Stop annoying bug with indenting elisp in a code block
        org-src-preserve-indentation t
        org-src-content-indentation 0
  
  ;; Don't ask for confirmation when executing a codeblock
        org-confirm-babel-evaluate nil)

  :general
  ;; Use ~org-return~ in org-mode to enable following links with RET while in Evil 'normal mode
  (general-define-key
    :states 'normal
    :keymaps 'org-mode-map
    "RET" 'org-return)

  (purplg/leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "t l" '(org-toggle-link-display :which-key "link display"))

  (purplg/leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "e" '(:which-key "eval")
    "e b" '(eval-buffer :which-key "buffer")
    "e f" '(eval-defun :which-key "function"))

  (purplg/leader-key
    :states 'visual
    :keymaps 'org-mode-map
    "e" '(:which-key "eval")
    "e r" '(eval-region :which-key "region")))

#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp :results none

;; Better fuzzy search. Unintuitively intercepts `ivy--regex-fuzzy` below
(use-package flx
  :straight t)

(use-package ivy
  :straight t

  :config
  (setq ivy-use-virtual-buffers t
        ivy-initial-inputs-alist nil
        ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (ivy-mode 1)

  :general
;; Minibuffer Evil movement keys
  (general-define-key
    :keymaps 'ivy-minibuffer-map
    "C-S-k" 'ivy-scroll-down-command
    "C-S-j" 'ivy-scroll-up-command
    "C-k" 'ivy-previous-line
    "C-j" 'ivy-next-line))

(use-package swiper
  :straight t
  :after ivy)

(use-package counsel
  :straight t
  :after ivy
  :config
  (setq counsel-describe-variable-function 'helpful-variable
        counsel-describe-function-function 'helpful-function)
  (counsel-mode 1))

#+END_SRC

* Help!

~describe-function~ and ~describe-variable~ are mapped to their respectful =helpful= functions via
the variables ~counsel-describe-variable-function~ and ~counsel-describe-function-function~ in the
[[*Ivy][section above]].

#+BEGIN_SRC emacs-lisp :results none

(use-package helpful
  :straight t
  :general
  (purplg/leader-key :states 'normal
    "h f" '(describe-function :which-key "function")
    "h v" '(describe-variable :which-key "variable")
    "h ." '(helpful-at-point :which-key "this")
    "h k" '(helpful-key :which-key "key")))

#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp :results none

(use-package yasnippet-snippets
  :straight t)

(use-package yasnippet
  :after yasnippet-snippets
  :straight t
  :config
  (push (expand-file-name "snippets" purplg/config-dir) yas-snippet-dirs)
  (yas-global-mode 1))

#+END_SRC

* Development
** Tools
*** Git

#+BEGIN_SRC emacs-lisp :results none

(use-package magit
  :straight t
  :general
  (purplg/leader-key :states 'normal
    "g" '(:which-key "git")
    "g g" '(magit-status :which-key "status")))

#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
(use-package git-gutter
  :straight t

  :config
  (add-hook 'prog-mode-hook 'git-gutter-mode))
#+END_SRC

*** Text completion

#+BEGIN_SRC emacs-lisp :results none
(use-package company
  :straight t)
#+END_SRC

*** LSP
#+BEGIN_SRC emacs-lisp :results none

(use-package lsp-mode
  :straight t

  :config
  (setq evil-lookup-func #'lsp-describe-thing-at-point)

(use-package lsp-ui
  :straight t
  :after lsp-mode

  :config
  ;; Disable because it causes input lag
  (setq lsp-ui-doc-enable nil)

  :general
  (general-define-key
    :keymaps 'lsp-mode-map
    "g D" '(lsp-ui-peek-find-references :which-key "find references"))

  (general-define-key
    :keymaps 'lsp-ui-peek-mode-map
    "j" 'lsp-ui-peek--select-next
    "h" 'lsp-ui-peek--select-prev-file
    "l" 'lsp-ui-peek--select-next-file
    "k" 'lsp-ui-peek--select-prev
    "C-<return>" 'lsp-ui-peek--goto-xref-other-window))

#+END_SRC

*** File tree

#+BEGIN_SRC emacs-lisp :results none

(use-package treemacs
  :straight t

  :config
  (treemacs-resize-icons 16)
  (treemacs-set-width 30)
  
  :general
  (purplg/leader-key
  :states 'normal
  "o p" 'treemacs))

(use-package treemacs-all-the-icons
  :straight t
  :after treemacs
  :config
  (treemacs-load-theme "all-the-icons"))

#+END_SRC

*** Project management
#+BEGIN_SRC emacs-lisp :results none

(defun purplg/project-search-thing-at-point ()
  (interactive)
  (counsel-rg (thing-at-point 'symbol)))

(use-package projectile
  :straight t
  :config
  (projectile-mode +1)

  :general
  (purplg/leader-key
    :states 'normal
    "p f" '(projectile-find-file :which-key "file")
    "p a" '(projectile-add-known-project :which-key "add")
    "p p" '(projectile-switch-project :which-key "open")
    "p s" '(counsel-rg :which-key "search")
    "p S" '(purplg/project-search-thing-at-point :which-key "search this")))
#+END_SRC

** Lanuages
*** Rust

#+BEGIN_SRC emacs-lisp :results none

(use-package rustic
  :straight t
  :config
  (add-hook 'rustic-mode-hook 'lsp))

#+END_SRC

*** Emacs Lisp
**** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp :results none

(use-package rainbow-delimiters
  :straight t
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))

#+END_SRC

**** Parinfer - for easy elisp paren management

#+BEGIN_SRC emacs-lisp :results none

(use-package parinfer-rust-mode
  :straight t
  :config
  (add-hook 'emacs-lisp-mode-hook 'parinfer-rust-mode)

  :general
  (purplg/local-leader-key
    :states 'normal
    :keymaps 'org-mode-map
    "p" '(parinfer-rust-toggle-paren-mode :which-key "parinfer")))


#+END_SRC
